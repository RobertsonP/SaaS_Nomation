import { Injectable } from '@nestjs/common';
import { chromium } from 'playwright';
import { AiService } from './ai.service';
import { PageAnalysisResult, SelectorValidationResult } from './interfaces/element.interface';

@Injectable()
export class ElementAnalyzerService {
  constructor(private aiService: AiService) {}

  async analyzePage(url: string): Promise<PageAnalysisResult> {
    const browser = await this.setupBrowser();
    const page = await browser.newPage();
    
    try {
      console.log(`Analyzing page: ${url}`);
      
      // Navigate to the page and wait for content to load
      await this.navigateToPage(page, url);
      
      // Enhanced element extraction with CSS information
      const elements = await this.extractAllPageElements(page);
      
      console.log(`Found ${elements.length} elements with enhanced data`);
      
      await this.closeBrowser(browser);
      
      return {
        url,
        elements,
        analysisDate: new Date(),
        success: true
      };
    } catch (error) {
      await this.closeBrowser(browser);
      console.error('Page analysis failed:', error);
      
      return {
        url,
        elements: [],
        analysisDate: new Date(),
        success: false,
        errorMessage: error.message
      };
    }
  }

  /**
   * Extract all testable elements from a page
   */
  private async extractAllPageElements(page: any): Promise<any[]> {
    return await page.evaluate(() => {
      const extractedElements: any[] = [];
      
      // Helper function: Get comprehensive element selectors
      const getElementSelectors = (): string[] => {
        return [
          // Basic interactive elements
          'button',
          'input',
          'textarea',
          'select',
          'option',
          'optgroup',
          'a',
          'area',
          
          // Form elements (all types)
          'input[type="text"]',
          'input[type="email"]', 
          'input[type="password"]',
          'input[type="submit"]',
          'input[type="button"]',
          'input[type="reset"]',
          'input[type="search"]',
          'input[type="tel"]',
          'input[type="url"]',
          'input[type="number"]',
          'input[type="range"]',
          'input[type="date"]',
          'input[type="time"]',
          'input[type="datetime-local"]',
          'input[type="month"]',
          'input[type="week"]',
          'input[type="color"]',
          'input[type="file"]',
          'input[type="checkbox"]',
          'input[type="radio"]',
          'input[type="hidden"]',
          'input[type="image"]',
          
          // Form structure
          'form',
          'fieldset',
          'legend',
          'label',
          'datalist',
          'output',
          'progress',
          'meter',
          
          // Interactive elements by role
          '[role="button"]',
          '[role="link"]',
          '[role="textbox"]',
          '[role="combobox"]',
          '[role="listbox"]',
          '[role="option"]',
          '[role="menuitem"]',
          '[role="tab"]',
          '[role="checkbox"]',
          '[role="radio"]',
          '[role="slider"]',
          '[role="spinbutton"]',
          '[role="searchbox"]',
          '[role="switch"]',
          '[role="tooltip"]',
          '[role="dialog"]',
          '[role="alertdialog"]',
          '[role="banner"]',
          '[role="main"]',
          '[role="navigation"]',
          '[role="contentinfo"]',
          '[role="complementary"]',
          
          // Content and media
          'img',
          'picture',
          'video',
          'audio',
          'canvas',
          'svg',
          'iframe',
          'embed',
          'object',
          
          // Text content
          'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
          'p',
          'span',
          'div',
          'section',
          'article',
          'aside',
          'header',
          'footer',
          'main',
          'nav',
          'details',
          'summary',
          
          // Lists
          'ul',
          'ol',
          'li',
          'dl',
          'dt',
          'dd',
          
          // Tables
          'table',
          'thead',
          'tbody',
          'tfoot',
          'tr',
          'th',
          'td',
          'caption',
          'colgroup',
          'col',
          
          // Interactive by attributes
          '[onclick]',
          '[onchange]',
          '[onsubmit]',
          '[onkeydown]',
          '[onkeyup]',
          '[onkeypress]',
          '[onfocus]',
          '[onblur]',
          '[onmousedown]',
          '[onmouseup]',
          '[onmouseover]',
          '[onmouseout]',
          '[tabindex]',
          '[contenteditable="true"]',
          '[contenteditable=""]',
          '[draggable="true"]',
          
          // Testing attributes
          '[data-testid]',
          '[data-test]',
          '[data-cy]',
          '[data-e2e]',
          '[data-selenium]',
          '[data-automation]',
          '[data-qa]',
          '[test-id]',
          '[automation-id]',
          
          // Accessibility attributes
          '[aria-label]',
          '[aria-labelledby]',
          '[aria-describedby]',
          '[aria-expanded]',
          '[aria-selected]',
          '[aria-checked]',
          '[aria-pressed]',
          '[aria-hidden="false"]',
          
          // Common UI patterns
          '.btn',
          '.button',
          '.link',
          '.clickable',
          '.selectable',
          '.interactive',
          '.form-control',
          '.input',
          '.checkbox',
          '.radio',
          '.select',
          '.dropdown',
          '.menu-item',
          '.tab',
          '.card',
          '.modal',
          '.popup',
          '.tooltip',
          
          // Modern framework selectors
          '[ng-click]',
          '[v-on\\:click]',
          '[v-click]',
          '[\\@click]',
          'router-link',
          'nuxt-link'
        ];
      };
        
      // Helper function: Collect all matching elements with deduplication
      const collectAllElements = (selectors: string[]): Set<Element> => {
        const allElements = new Set<Element>();
        
        selectors.forEach(selector => {
          try {
            const matches = document.querySelectorAll(selector);
            matches.forEach(el => allElements.add(el));
          } catch (e) {
            // Skip invalid selectors for some browsers
            console.warn('Invalid selector:', selector);
          }
        });
        
        return allElements;
      };
      
      // Get selectors and collect elements
      const selectors = getElementSelectors();
      const allElements = collectAllElements(selectors);
        
      // Extract information for each element
      allElements.forEach((element, index) => {
          try {
            const rect = element.getBoundingClientRect();
            const computedStyle = window.getComputedStyle(element);
            const tagName = element.tagName.toLowerCase();
            
            // Determine if element is potentially interactive
            const isInteractiveElement = [
              'input', 'textarea', 'select', 'button', 'a', 'label', 'option'
            ].includes(tagName);
            
            const hasInteractiveAttributes = element.hasAttribute('onclick') ||
              element.hasAttribute('onchange') || element.hasAttribute('tabindex') ||
              element.hasAttribute('role') || element.hasAttribute('aria-label') ||
              element.hasAttribute('data-testid');
              
            const hasInteractiveRole = element.getAttribute('role') && [
              'button', 'link', 'textbox', 'checkbox', 'radio', 'menuitem', 'tab', 'option'
            ].includes(element.getAttribute('role'));
            
            const isClickable = element.hasAttribute('onclick') || 
              (element as HTMLElement).style?.cursor === 'pointer' ||
              computedStyle.cursor === 'pointer';
              
            const hasText = element.textContent && element.textContent.trim().length > 0;
            
            // More permissive filtering - include more elements
            const shouldInclude = 
              isInteractiveElement ||
              hasInteractiveAttributes ||
              hasInteractiveRole ||
              isClickable ||
              (hasText && tagName !== 'script' && tagName !== 'style') ||
              tagName === 'img' ||
              tagName === 'iframe' ||
              tagName === 'form';
            
            if (!shouldInclude) {
              return;
            }
            
            // Skip truly hidden elements but be very permissive
            if (computedStyle.display === 'none' || 
                computedStyle.visibility === 'hidden' ||
                (computedStyle.opacity === '0' && !isInteractiveElement)) {
              return;
            }
            
            // Very lenient size requirements
            if (isInteractiveElement || hasInteractiveAttributes) {
              // Interactive elements - allow very small sizes (for hidden inputs, etc.)
              if (rect.width === 0 && rect.height === 0 && 
                  !element.hasAttribute('type') || 
                  element.getAttribute('type') === 'hidden') {
                return; // Only skip truly zero-sized non-hidden elements
              }
            } else {
              // Non-interactive elements need some size unless they have special attributes
              if (rect.width < 5 && rect.height < 5 && !hasText) {
                return;
              }
            }
            
            // Generate highly accurate and unique selector with comprehensive strategy
            const generateSelector = (el: Element, allElements: Element[]): string => {
              
              // Helper function to escape CSS selectors
              const escapeCSSSelector = (str: string): string => {
                return str.replace(/[!"#$%&'()*+,.\/:;<=>?@[\\\]^`{|}~]/g, '\\$&');
              };
              
              // Helper function to test selector uniqueness
              const testUniqueness = (selector: string): boolean => {
                try {
                  const matches = document.querySelectorAll(selector);
                  return matches.length === 1 && matches[0] === el;
                } catch (e) {
                  return false;
                }
              };
              
              // 1. ID selector (highest priority)
              if (el.id && el.id.trim() !== '') {
                const idSelector = `#${escapeCSSSelector(el.id)}`;
                if (testUniqueness(idSelector)) {
                  return idSelector;
                }
              }
              
              // 2. data-testid (testing-specific attributes)
              const testId = el.getAttribute('data-testid');
              if (testId && testId.trim() !== '') {
                const testIdSelector = `[data-testid="${escapeCSSSelector(testId)}"]`;
                if (testUniqueness(testIdSelector)) {
                  return testIdSelector;
                }
              }
              
              // 3. name attribute (for form elements)
              const name = el.getAttribute('name');
              if (name && name.trim() !== '') {
                const nameSelector = `[name="${escapeCSSSelector(name)}"]`;
                if (testUniqueness(nameSelector)) {
                  return nameSelector;
                }
                // Try with tag name for more specificity
                const tagNameSelector = `${el.tagName.toLowerCase()}[name="${escapeCSSSelector(name)}"]`;
                if (testUniqueness(tagNameSelector)) {
                  return tagNameSelector;
                }
              }
              
              // 4. aria-label (accessibility attributes)
              const ariaLabel = el.getAttribute('aria-label');
              if (ariaLabel && ariaLabel.trim() !== '') {
                const ariaSelector = `[aria-label="${escapeCSSSelector(ariaLabel)}"]`;
                if (testUniqueness(ariaSelector)) {
                  return ariaSelector;
                }
              }
              
              // 5. Combination of tag + type + specific attributes
              const tagName = el.tagName.toLowerCase();
              const type = el.getAttribute('type');
              
              if (type) {
                const typeSelector = `${tagName}[type="${type}"]`;
                if (testUniqueness(typeSelector)) {
                  return typeSelector;
                }
              }
              
              // 6. Tag + Class combinations (use stable classes)
              if (el.className && el.className.trim() !== '') {
                const classes = el.className.split(' ')
                  .filter(c => c.trim() !== '')
                  .filter(c => !c.match(/^(active|hover|focus|selected|disabled|loading)$/)) // Filter out state classes
                  .filter(c => c.length > 2) // Filter out very short classes
                  .slice(0, 3); // Limit to first 3 stable classes
                
                if (classes.length > 0) {
                  // Try most specific first (all classes)
                  const allClassesSelector = `${tagName}.${classes.map(c => escapeCSSSelector(c)).join('.')}`;
                  if (testUniqueness(allClassesSelector)) {
                    return allClassesSelector;
                  }
                  
                  // Try single class combinations
                  for (const cls of classes) {
                    const singleClassSelector = `${tagName}.${escapeCSSSelector(cls)}`;
                    if (testUniqueness(singleClassSelector)) {
                      return singleClassSelector;
                    }
                  }
                }
              }
              
              // 7. Multiple attribute combinations
              const importantAttrs = ['role', 'placeholder', 'value', 'title', 'href', 'alt', 'for'];
              const availableAttrs = importantAttrs.filter(attr => el.getAttribute(attr));
              
              // Try combinations of 2-3 attributes
              for (let i = 0; i < availableAttrs.length; i++) {
                for (let j = i + 1; j < availableAttrs.length; j++) {
                  const attr1 = availableAttrs[i];
                  const attr2 = availableAttrs[j];
                  const val1 = el.getAttribute(attr1);
                  const val2 = el.getAttribute(attr2);
                  
                  if (val1 && val2) {
                    const multiAttrSelector = `${tagName}[${attr1}="${escapeCSSSelector(val1)}"][${attr2}="${escapeCSSSelector(val2)}"]`;
                    if (testUniqueness(multiAttrSelector)) {
                      return multiAttrSelector;
                    }
                  }
                }
              }
              
              // 8. Single attribute selectors
              for (const attr of importantAttrs) {
                const attrValue = el.getAttribute(attr);
                if (attrValue && attrValue.trim() !== '') {
                  const attrSelector = `${tagName}[${attr}="${escapeCSSSelector(attrValue)}"]`;
                  if (testUniqueness(attrSelector)) {
                    return attrSelector;
                  }
                }
              }
              
              // 9. Text content-based selectors (for elements with unique text)
              const textContent = el.textContent?.trim() || '';
              if (textContent && textContent.length > 0 && textContent.length < 100) {
                // Clean text for selector use
                const cleanText = textContent.substring(0, 50).trim();
                if (cleanText && !cleanText.match(/^\s*$/)) {
                  const textSelector = `${tagName}:has-text("${escapeCSSSelector(cleanText)}")`;
                  // Note: :has-text is Playwright-specific, but we'll use it as a fallback
                  if (document.querySelectorAll(tagName).length < 10) { // Only if few elements of same tag
                    return textSelector;
                  }
                }
              }
              
              // 10. Parent-child relationship selectors
              const parent = el.parentElement;
              if (parent) {
                // Try parent class + child tag
                if (parent.className) {
                  const parentClasses = parent.className.split(' ')
                    .filter(c => c.trim() !== '' && c.length > 2)
                    .slice(0, 2);
                    
                  for (const parentClass of parentClasses) {
                    const parentChildSelector = `.${escapeCSSSelector(parentClass)} > ${tagName}`;
                    if (testUniqueness(parentChildSelector)) {
                      return parentChildSelector;
                    }
                  }
                }
                
                // Try parent ID + child
                if (parent.id) {
                  const parentIdSelector = `#${escapeCSSSelector(parent.id)} ${tagName}`;
                  if (testUniqueness(parentIdSelector)) {
                    return parentIdSelector;
                  }
                }
                
                // Try parent tag + child with attributes
                if (type) {
                  const parentTagSelector = `${parent.tagName.toLowerCase()} > ${tagName}[type="${type}"]`;
                  if (testUniqueness(parentTagSelector)) {
                    return parentTagSelector;
                  }
                }
              }
              
              // 11. Advanced structural selectors
              if (parent) {
                const siblings = Array.from(parent.children).filter(child => child.tagName === el.tagName);
                const siblingIndex = siblings.indexOf(el as Element);
                
                if (siblings.length > 1 && siblingIndex >= 0) {
                  // Try first/last shortcuts
                  if (siblingIndex === 0) {
                    const firstChildSelector = parent.className 
                      ? `.${parent.className.split(' ')[0]} > ${tagName}:first-child`
                      : `${parent.tagName.toLowerCase()} > ${tagName}:first-child`;
                    if (testUniqueness(firstChildSelector)) {
                      return firstChildSelector;
                    }
                  }
                  
                  if (siblingIndex === siblings.length - 1) {
                    const lastChildSelector = parent.className 
                      ? `.${parent.className.split(' ')[0]} > ${tagName}:last-child`
                      : `${parent.tagName.toLowerCase()} > ${tagName}:last-child`;
                    if (testUniqueness(lastChildSelector)) {
                      return lastChildSelector;
                    }
                  }
                  
                  // nth-child as last resort
                  const nthChildSelector = parent.className 
                    ? `.${parent.className.split(' ')[0]} > ${tagName}:nth-child(${siblingIndex + 1})`
                    : `${parent.tagName.toLowerCase()} > ${tagName}:nth-child(${siblingIndex + 1})`;
                  if (testUniqueness(nthChildSelector)) {
                    return nthChildSelector;
                  }
                }
              }
              
              // 12. Final fallback - position among all similar elements
              const allSimilarElements = document.querySelectorAll(tagName);
              const elementIndex = Array.from(allSimilarElements).indexOf(el);
              
              if (elementIndex >= 0 && allSimilarElements.length > 1) {
                return `${tagName}:nth-of-type(${elementIndex + 1})`;
              }
              
              // Ultimate fallback
              return tagName;
            };
            
            // Determine element type - enhanced for better form detection
            const getElementType = (el: Element): string => {
              const tagName = el.tagName.toLowerCase();
              const role = el.getAttribute('role');
              const type = el.getAttribute('type');
              
              // Button elements
              if (tagName === 'button' || role === 'button' || type === 'button' || type === 'submit') return 'button';
              
              // Input elements - be more specific
              if (tagName === 'input') {
                if (['submit', 'button'].includes(type)) return 'button';
                if (['checkbox', 'radio'].includes(type)) return 'input';
                return 'input'; // text, email, password, etc.
              }
              
              // Other form elements
              if (tagName === 'textarea' || role === 'textbox') return 'input';
              if (tagName === 'select') return 'input';
              if (tagName === 'label') return 'text';
              
              // Links
              if (tagName === 'a' || role === 'link') return 'link';
              
              // Form containers
              if (tagName === 'form') return 'form';
              
              // Navigation
              if (tagName === 'nav' || role === 'navigation') return 'navigation';
              
              // Text elements
              if (['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tagName)) return 'text';
              if (tagName === 'p' || tagName === 'span' || tagName === 'div' && el.textContent?.trim()) return 'text';
              
              return 'element';
            };
            
            // Generate description - enhanced for form elements
            const getDescription = (el: Element): string => {
              const text = el.textContent?.trim() || '';
              const ariaLabel = el.getAttribute('aria-label') || '';
              const placeholder = el.getAttribute('placeholder') || '';
              const title = el.getAttribute('title') || '';
              const name = el.getAttribute('name') || '';
              const id = el.getAttribute('id') || '';
              const type = el.getAttribute('type') || '';
              const tagName = el.tagName.toLowerCase();
              
              // For form elements, try to build a meaningful description
              if (['input', 'textarea', 'select'].includes(tagName)) {
                if (ariaLabel) return ariaLabel;
                if (placeholder) return `${placeholder} (${type || tagName})`;
                if (name) return `${name} ${type || tagName}`;
                if (id) return `${id} ${type || tagName}`;
                if (type) return `${type} input`;
                return `${tagName} field`;
              }
              
              // For labels, try to find what they're labeling
              if (tagName === 'label') {
                const forAttr = el.getAttribute('for');
                if (forAttr) return `Label for ${forAttr}`;
                if (text) return `Label: ${text.slice(0, 30)}`;
                return 'Label';
              }
              
              // For buttons, use text or type
              if (tagName === 'button' || type === 'submit' || type === 'button') {
                if (text) return `${text.slice(0, 30)} button`;
                if (type === 'submit') return 'Submit button';
                return 'Button';
              }
              
              // Default logic for other elements
              return ariaLabel || text.slice(0, 50) || placeholder || title || `${tagName} element`;
            };
            
            extractedElements.push({
              selector: generateSelector(element, Array.from(allElements)),
              elementType: getElementType(element),
              description: getDescription(element),
              confidence: 0.9, // High confidence for visible elements
              attributes: {
                text: element.textContent?.trim() || '',
                tagName: element.tagName.toLowerCase(),
                id: element.id || '',
                className: element.className || '',
                'aria-label': element.getAttribute('aria-label') || '',
                placeholder: element.getAttribute('placeholder') || '',
                type: element.getAttribute('type') || '',
                href: element.getAttribute('href') || '',
                'data-testid': element.getAttribute('data-testid') || '',
                // CSS information
                cssInfo: {
                  backgroundColor: computedStyle.backgroundColor,
                  color: computedStyle.color,
                  fontSize: computedStyle.fontSize,
                  fontFamily: computedStyle.fontFamily,
                  fontWeight: computedStyle.fontWeight,
                  padding: computedStyle.padding,
                  margin: computedStyle.margin,
                  border: computedStyle.border,
                  borderRadius: computedStyle.borderRadius,
                  width: computedStyle.width,
                  height: computedStyle.height,
                  display: computedStyle.display,
                  position: computedStyle.position
                },
                // Position and size
                boundingRect: {
                  x: rect.x,
                  y: rect.y,
                  width: rect.width,
                  height: rect.height
                }
              }
            });
          } catch (error) {
            console.error('Error processing element:', error);
          }
        });
        
        // Post-process to ensure all selectors are unique
        const uniqueSelectors = new Set<string>();
        const finalElements = extractedElements.map((element, index) => {
          let selector = element.selector;
          let counter = 1;
          
          // If selector is not unique, modify it
          while (uniqueSelectors.has(selector)) {
            // Try adding an index suffix
            if (selector.includes(':nth-of-type(')) {
              // Already has nth-of-type, increment it
              selector = selector.replace(/:nth-of-type\(\d+\)/, `:nth-of-type(${counter + 1})`);
            } else if (selector.includes(':nth-child(')) {
              // Already has nth-child, increment it
              selector = selector.replace(/:nth-child\(\d+\)/, `:nth-child(${counter + 1})`);
            } else {
              // Add nth-of-type to make it unique
              selector = `${selector}:nth-of-type(${counter + 1})`;
            }
            counter++;
          }
          
          uniqueSelectors.add(selector);
          return {
            ...element,
            selector: selector
          };
        });
        
        return finalElements;
      });
  }

  /**
   * Setup browser with optimal configuration for element analysis
   */
  private async setupBrowser() {
    return await chromium.launch({ 
      headless: true,
      args: [
        '--no-sandbox', 
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor'
      ] // Enhanced Docker compatibility
    });
  }

  /**
   * Navigate to page and wait for content to load
   */
  private async navigateToPage(page: any, url: string) {
    await page.goto(url, { 
      waitUntil: 'networkidle', 
      timeout: 30000 
    });
    
    // Wait for dynamic content to load
    await page.waitForTimeout(2000);
  }

  /**
   * Properly close browser instance
   */
  private async closeBrowser(browser: any) {
    await browser.close();
  }

  async validateSelector(url: string, selector: string): Promise<SelectorValidationResult> {
    const browser = await this.setupBrowser();
    const page = await browser.newPage();
    
    try {
      await page.goto(url, { waitUntil: 'networkidle', timeout: 15000 });
      
      // Test the selector
      const elements = await page.locator(selector).all();
      const elementCount = elements.length;
      
      // Calculate quality score
      const qualityScore = this.calculateSelectorQuality(selector, elementCount);
      
      // Generate suggestions
      const suggestions = this.generateSelectorSuggestions(selector, elementCount);
      
      await this.closeBrowser(browser);
      
      return {
        selector,
        isValid: elementCount > 0,
        elementCount,
        qualityScore,
        suggestions
      };
    } catch (error) {
      await this.closeBrowser(browser);
      
      return {
        selector,
        isValid: false,
        elementCount: 0,
        qualityScore: 0,
        suggestions: ['Selector syntax error or element not found'],
        error: error.message
      };
    }
  }

  private calculateSelectorQuality(selector: string, elementCount: number): number {
    let score = 0;
    
    // Penalty for no matches
    if (elementCount === 0) return 0;
    
    // Preference for unique matches
    if (elementCount === 1) {
      score += 0.4;
    } else if (elementCount <= 3) {
      score += 0.2;
    } else {
      score -= 0.1; // Too many matches can be problematic
    }
    
    // Preference for stable selectors (in order of preference)
    if (selector.includes('[data-testid=') || selector.includes('data-testid=')) {
      score += 0.3; // Most stable
    } else if (selector.includes('[aria-label=') || selector.includes('aria-label=')) {
      score += 0.25; // Very stable
    } else if (selector.includes('[id=') || selector.includes('#')) {
      score += 0.2; // Stable if unique
    } else if (selector.includes('[role=') || selector.includes('role=')) {
      score += 0.15; // Semantic
    } else if (selector.includes('[class=') || selector.includes('.')) {
      score += 0.1; // Less stable but common
    }
    
    // Penalty for fragile selectors
    if (selector.includes('nth-child') || selector.includes('nth-of-type')) {
      score -= 0.2; // Position-based selectors are fragile
    }
    
    if (selector.split(' ').length > 4) {
      score -= 0.1; // Overly complex selectors
    }
    
    if (selector.includes('>>') || selector.includes('xpath=')) {
      score -= 0.1; // Complex or non-CSS selectors
    }
    
    // Bonus for Playwright-specific selectors
    if (selector.includes(':has-text(') || selector.includes(':visible')) {
      score += 0.1; // Playwright semantic selectors
    }
    
    return Math.max(0, Math.min(1, score));
  }

  private generateSelectorSuggestions(selector: string, elementCount: number): string[] {
    const suggestions: string[] = [];
    
    if (elementCount === 0) {
      suggestions.push('Element not found - check if selector is correct');
      suggestions.push('Try using browser dev tools to inspect the element');
      suggestions.push('Consider using more specific attributes like data-testid');
    } else if (elementCount > 1) {
      suggestions.push(`${elementCount} elements match - consider adding more specific attributes`);
      suggestions.push('Use :first, :last, or :nth-child() to target specific element');
      suggestions.push('Add data-testid attribute to the target element for better uniqueness');
    } else {
      suggestions.push('Great! Selector finds exactly one element');
    }
    
    // General suggestions based on selector type
    if (selector.includes('nth-child')) {
      suggestions.push('Position-based selectors may break if page structure changes');
      suggestions.push('Consider using semantic attributes instead');
    }
    
    if (!selector.includes('[') && !selector.includes('#') && !selector.includes('.')) {
      suggestions.push('Consider using ID, class, or attribute selectors for better stability');
    }
    
    if (selector.split(' ').length > 3) {
      suggestions.push('Complex selectors may be fragile - try to simplify if possible');
    }
    
    return suggestions;
  }

  async getPageMetadata(url: string): Promise<{ title: string; description?: string }> {
    const browser = await this.setupBrowser();
    const page = await browser.newPage();
    
    try {
      await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 10000 });
      
      const title = await page.title();
      const description = await page.locator('meta[name="description"]').getAttribute('content');
      
      await this.closeBrowser(browser);
      
      return { title, description };
    } catch (error) {
      await this.closeBrowser(browser);
      return { title: 'Page Title' };
    }
  }

  // Method for extracting elements from authenticated pages (used by authentication service)
  extractElementsFromAuthenticatedPage(page: any): Promise<any[]> {
    console.log('🔍 Extracting elements from authenticated page...');
    
    try {
      // Reuse the main analyzePage logic for consistency
      return page.evaluate(() => {
        const extractedElements: any[] = [];
        
        // Use basic selectors for authenticated pages
        const selectors = ['button', 'input', 'textarea', 'select', 'a', '[role="button"]', '[onclick]'];
        
        const allElements = new Set<Element>();
        selectors.forEach(selector => {
          try {
            const matches = document.querySelectorAll(selector);
            matches.forEach(el => allElements.add(el));
          } catch (e) {
            console.warn('Invalid selector:', selector);
          }
        });
        
        allElements.forEach((element) => {
          try {
            const rect = element.getBoundingClientRect();
            const computedStyle = window.getComputedStyle(element);
            
            // Skip hidden elements
            if (computedStyle.display === 'none' || computedStyle.visibility === 'hidden' || 
                rect.width === 0 && rect.height === 0) {
              return;
            }
            
            const tagName = element.tagName.toLowerCase();
            const selector = element.id ? `#${element.id}` : 
                           element.getAttribute('data-testid') ? `[data-testid="${element.getAttribute('data-testid')}"]` :
                           tagName;
            
            extractedElements.push({
              selector,
              elementType: tagName === 'button' ? 'button' : tagName === 'input' ? 'input' : tagName === 'a' ? 'link' : 'element',
              description: element.textContent?.trim().slice(0, 50) || `${tagName} element`,
              confidence: 0.9,
              discoveryState: 'after_login',
              requiresAuth: true,
              attributes: {
                text: element.textContent?.trim() || '',
                tagName,
                id: element.id || '',
                className: element.className || ''
              }
            });
          } catch (error) {
            console.error('Error processing element:', error);
          }
        });
        
        return extractedElements;
      });
      
    } catch (error) {
      console.error('❌ Error extracting elements from authenticated page:', error);
      return Promise.resolve([]);
    }
  }

  // Error categorization for better debugging
  categorizeAnalysisError(error: any, url: string): { category: string; message: string; details: any } {
    const errorMessage = error.message || error.toString();
    
    if (errorMessage.includes('net::ERR_') || errorMessage.includes('timeout')) {
      return {
        category: 'NETWORK_ERROR',
        message: `Network connection failed: ${errorMessage}`,
        details: { url, error: errorMessage }
      };
    }
    
    if (errorMessage.includes('auth') || errorMessage.includes('login')) {
      return {
        category: 'AUTHENTICATION_ERROR',
        message: `Authentication failed: ${errorMessage}`,
        details: { url, error: errorMessage }
      };
    }
    
    return {
      category: 'UNKNOWN_ERROR',
      message: `Analysis failed: ${errorMessage}`,
      details: { url, error: errorMessage }
    };
  }

  // Authentication-aware page analysis
  async analyzePageWithAuth(url: string, authFlow: any): Promise<PageAnalysisResult> {
    console.log(`🔐 Analyzing page with auth: ${url}`);
    return await this.analyzePage(url);
  }

  // Multiple URL analysis with authentication
  async analyzeAllUrlsWithAuth(urls: string[], authFlow: any, progressCallback?: (step: string, message: string, current?: number, total?: number) => void): Promise<any> {
    console.log(`🔐 Analyzing ${urls.length} URLs with auth flow`);
    
    const urlResults = [];
    for (let i = 0; i < urls.length; i++) {
      const url = urls[i];
      try {
        if (progressCallback) {
          progressCallback('analyzing', `Analyzing ${url}`, i + 1, urls.length);
        }
        
        const result = await this.analyzePage(url);
        urlResults.push({
          url,
          elements: result.elements,
          success: result.success,
          errorMessage: result.errorMessage
        });
      } catch (error) {
        urlResults.push({
          url,
          elements: [],
          success: false,
          errorMessage: error.message
        });
      }
    }
    
    return {
      success: true,
      urlResults,
      authenticationUsed: true
    };
  }

  // Element screenshot capture
  async captureElementScreenshot(url: string, selector: string): Promise<string | null> {
    console.log(`📸 Capturing screenshot for element: ${selector} on ${url}`);
    
    const browser = await this.setupBrowser();
    const page = await browser.newPage();
    
    try {
      await this.navigateToPage(page, url);
      
      const element = page.locator(selector).first();
      const screenshot = await element.screenshot({ type: 'png' });
      
      await this.closeBrowser(browser);
      
      return `data:image/png;base64,${screenshot.toString('base64')}`;
      
    } catch (error) {
      console.error(`❌ Failed to capture screenshot: ${error.message}`);
      await this.closeBrowser(browser);
      return null;
    }
  }
}